#!/usr/bin/env python
#
# Install source packages to ~/opt/local.
#
# This script assumes that all source package dependencies are already
# installed.

import sys
import os
import subprocess
import filecmp
import shutil
import distutils.spawn

b2 = distutils.spawn.find_executable('b2')
if not b2:
    b2 = distutils.spawn.find_executable('bjam')
if not b2:
    print 'warning: Boost.Build was not found, skipping source packages that require it.'


def git_clone_update_pull_ff_only(url, directory):
    """Clone, update, and pull --ff-only the given url to the given
    directory.

    """
    if not os.path.exists(directory):
        command = ['git', 'clone', url, directory]
        subprocess.check_call(command)

    command = ['git', '-C', directory, 'pull', '--ff-only']
    subprocess.check_call(command)
    command = ['git', '-C', directory, 'submodule', 'init']
    subprocess.check_call(command)
    command = ['git', '-C', directory, 'submodule', 'update']
    subprocess.check_call(command)


def install_tee3_c_style(basedir):
    git_clone_update_pull_ff_only(
        'https://github.com/tee3/tee3-c-style.git',
        os.path.join(basedir, 'src', 'tee3-c-style'))


def install_msvc_c_style(basedir):
    git_clone_update_pull_ff_only(
        'https://github.com/tee3/msvc-c-style.git',
        os.path.join(basedir, 'src', 'msvc-c-style'))


def install_lsp_clangd(basedir):
    git_clone_update_pull_ff_only(
        'https://github.com/tee3/lsp-clangd.git',
        os.path.join(basedir, 'src', 'lsp-clangd'))


def install_git_svn_update_externals(basedir):
    git_clone_update_pull_ff_only(
        'https://github.com/tee3/git-svn-update-externals.git',
        os.path.join(basedir, 'src', 'git-svn-update-externals'))

    source = os.path.join(basedir, 'src', 'git-svn-update-externals', 'git-svn-update-externals')
    target = os.path.join(basedir, 'bin', 'git-svn-update-externals')

    if os.path.exists (target):
        if not filecmp.cmp(target, source, False):
            yn = raw_input('%s is different than %s.  Overwrite anyway? (y/n): ' % (source, target))
            if yn == 'y':
                os.remove(target)

    if not os.path.exists (target):
        if hasattr(os, 'symlink'):
            os.symlink(source, target)
        else:
            shutil.copyfile(source, target)


def install_rtags(basedir):
    rtagsdir = os.path.join(basedir, 'src', 'rtags')

    git_clone_update_pull_ff_only(
        'https://github.com/andersbakken/rtags.git',
        rtagsdir)

    command = ['git', '-C', rtagsdir, 'clean', '-d', '-x', '-f']
    subprocess.check_call(command)

    build = os.path.join(rtagsdir, 'Release')
    if not os.path.exists(build):
        os.makedirs(build)

    bash_completion_option = ''
    if sys.platform.startswith('darwin'):
        bash_completion_option = '-DFORCE_BASH_COMPLETION_INSTALLATION=1'

    command = [
        'cmake',
        bash_completion_option,
        '-DCMAKE_BUILD_TYPE=Release',
        '-DCMAKE_INSTALL_PREFIX:PATH=' + basedir,
        '..'
    ]
    subprocess.check_call(command, cwd=build)
    command = ['make']
    subprocess.check_call(command, cwd=build)
    command = ['make', 'install']
    subprocess.check_call(command, cwd=build)


def install_boost(basedir):
    boostdir = os.path.join(basedir, 'src', 'boost', 'boost.git')

    git_clone_update_pull_ff_only(
        'https://github.com/boostorg/boost.git',
        boostdir)

    command = ['git', '-C', boostdir, 'clean', '-d', '-x', '-f']
    subprocess.check_call(command)

    if sys.platform.startswith('win32'):
        command = [os.path.join (boostdir, 'bootstrap.bat')]
    else:
        command = [os.path.join (boostdir, 'bootstrap.sh')]
    subprocess.check_call(command, cwd=boostdir)


def install_standardese(basedir):
    standardesedir = os.path.join(basedir, 'src', 'standardese')

    git_clone_update_pull_ff_only(
        'https://github.com/foonathan/standardese.git',
        standardesedir)

    command = ['git', '-C', standardesedir, 'clean', '-d', '-x', '-f']
    subprocess.check_call(command)

    build = os.path.join(standardesedir, 'Debug')
    if not os.path.exists(build):
        os.makedirs(build)

    libclang_include_dir_option = ''
    libclang_library_option = ''
    libclang_system_include_dir_option = ''
    if sys.platform.startswith('darwin'):
        llvm_prefix = subprocess.check_output(['brew', '--prefix', 'llvm']).rstrip()
        libclang_include_dir = os.path.join(llvm_prefix, 'include')
        if libclang_include_dir:
            libclang_include_dir_option = '-DLIBCLANG_INCLUDE_DIR=' + libclang_include_dir
        libclang_library = os.path.join(llvm_prefix, 'lib', 'libclang.dylib')
        if libclang_library:
            libclang_library_option = '-DLIBCLANG_LIBRARY=' + libclang_library
        libclang_system_include_dir = os.path.join(llvm_prefix, 'include', 'clang')
        if libclang_system_include_dir:
            libclang_system_include_dir_option = '-DLIBCLANG_SYSTEM_INCLUDE_DIR=' + libclang_system_include_dir

    command = [
        'cmake',
        libclang_include_dir_option,
        libclang_library_option,
        libclang_system_include_dir_option,
        '-DCMAKE_BUILD_TYPE=Debug',
        '-DCMAKE_INSTALL_PREFIX:PATH=' + basedir,
        '-DSTANDARDESE_BUILD_TEST=OFF',
        '..'
    ]
    subprocess.check_call(command, cwd=build)
    command = ['cmake', '--build', '.', '--target', 'install']
    subprocess.check_call(command, cwd=build)

def install_commands_to_compilation_database(basedir):
    if not b2:
        return

    sourcedir = os.path.join(basedir, 'src', 'commands_to_compilation_database')

    git_clone_update_pull_ff_only(
        'https://github.com/tee3/commands_to_compilation_database.git',
        sourcedir)

    command = [
        b2,
        'install',
        '--prefix=' + basedir
    ]
    subprocess.check_call(command, cwd=sourcedir)

# requires HOME.
if 'HOME' not in os.environ or os.environ['HOME'] == '':
    print 'error: HOME is not set, aborting.'
    sys.exit(1)
HOME = os.environ['HOME']

# default the prefix to ~/opt/local
prefix = os.path.join(HOME, 'opt', 'local')

if __name__ == '__main__':
    r = 0

    # install desired source packages
    install_tee3_c_style(prefix)
    install_msvc_c_style(prefix)
    install_lsp_clangd(prefix)
    install_commands_to_compilation_database(prefix)
    install_git_svn_update_externals(prefix)
    try:
        if not sys.platform.startswith('win32'):
            install_rtags(prefix)
    except:
        r = 1
    install_boost(prefix)
    install_standardese(prefix)

    sys.exit(r)
