#!/bin/sh
#
# Install interesting packages for Debian.
#
# This assumes that the current user is the user used to install
# packages and has the proper administrator privileges.

set -e
set -u

# package manager
pm=
pm_check=
pm_update=
pm_upgrade=
pm_install=
pm_autoremove=
pm_cleanup=

# check if apt is installed
if [ -z "$(command -v apt 2> /dev/null)" ]; then
    printf "warning: apt not found\n" 1>&2
else
    pm="apt"
    pm_check="true"
    pm_update="sudo ${pm} update"
    pm_upgrade="sudo ${pm} upgrade"
    pm_install="sudo apt install"
    pm_autoremove="sudo ${pm} autoremove"
    pm_cleanup="sudo ${pm} clean"
fi

# check if package manager is installed
if [ -z "${pm}" ]; then
    printf "error: Package manager not found.\n" 1>&2
    exit 1
fi

# update and check packages
${pm_update}
if ! ${pm_check} ; then
    printf "warning: Package manager check failed, continue anyway (y/n)?: "
    read -r yn
    if [ "${yn}" != "y" ]; then
	exit 1
    fi
fi
${pm_update}

# upgrade existing packages
${pm_upgrade}

packages=
packages="${packages} aspell"
packages="${packages} bash-completion"
packages="${packages} libboost-all-dev"
packages="${packages} libboost-tools-dev"
packages="${packages} clang"
# packages="${packages} clang-6"
# packages="${packages} clang-7"
# packages="${packages} clang-8"
# packages="${packages} clang-9"
# packages="${packages} clang-10"
# packages="${packages} clang-11"
# packages="${packages} clang-12"
# packages="${packages} clang-13"
# packages="${packages} clang-14"
# packages="${packages} clang-15"
# packages="${packages} clang-16"
# packages="${packages} clang-17"
packages="${packages} cmake"
packages="${packages} curl"
packages="${packages} dos2unix"
packages="${packages} emacs"
# packages="${packages} emscripten"
packages="${packages} g++"
# packages="${packages} g++-6"
packages="${packages} g++-7"
packages="${packages} g++-8"
packages="${packages} g++-9"
packages="${packages} g++-10"
# packages="${packages} g++-11"
# packages="${packages} g++-12"
# packages="${packages} g++-13"
# packages="${packages} g++-14"
packages="${packages} gdb"
packages="${packages} gh"
packages="${packages} git"
packages="${packages} git-lfs"
packages="${packages} gnuplot"
packages="${packages} golang"
packages="${packages} gpg"
packages="${packages} guile-3.0"
packages="${packages} htop"
packages="${packages} jq"
packages="${packages} julia"
packages="${packages} keychain"
packages="${packages} clang"
packages="${packages} clang-7"
packages="${packages} clang-8"
packages="${packages} clang-9"
# packages="${packages} clang-10"
packages="${packages} clang-11"
packages="${packages} clang-12"
packages="${packages} luarocks"
packages="${packages} mit-scheme"
packages="${packages} openssh-server"
# packages="${packages} parallel"
packages="${packages} pkg-config"
packages="${packages} python3"
packages="${packages} python3-pip"
packages="${packages} python3-venv"
packages="${packages} rustc"
# packages="${packages} rustc-completion"
packages="${packages} shellcheck"
packages="${packages} socat"
packages="${packages} sqlite"
packages="${packages} ssh-copy-id"
packages="${packages} stow"
packages="${packages} tcpdump"
packages="${packages} tig"
# packages="${packages} zsh-completions"

${pm_install} ${packages}

# cleanup
${pm_autoremove}
${pm_cleanup}
