#!/bin/sh
#
# Install interesting packages for Fedora.
#
# This assumes that the current user is the user used to install
# packages and has the proper administrator privileges.

set -e
set -u

release="$(cat /etc/fedora-release)"
version=0
if [ "${release}" = "Fedora release 22 (Twenty Two)" ]; then
    version=22
elif [ "${release}" = "Fedora release 23 (Twenty Three)" ]; then
    version=23
elif [ "${release}" = "Fedora release 24 (Twenty Four)" ]; then
    version=24
elif [ "${release}" = "Fedora release 25 (Twenty Five)" ]; then
    version=25
elif [ "${release}" = "Fedora release 26 (Twenty Six)" ]; then
    version=26
elif [ "${release}" = "Fedora release 27 (Twenty Seven)" ]; then
    version=27
fi

# package manager
pm=
pm_check=
pm_update=
pm_upgrade=
pm_install=
pm_autoremove=
pm_cleanup=

# check if dnf is installed
if [ -z "$(command -v dnf 2> /dev/null)" ]; then
    printf "warning: dnf not found.\n" 1>&2
else
    pm="dnf"
    pm_check="true"
    pm_update="sudo ${pm} update"
    pm_upgrade="true"
    pm_install="sudo ${pm} -q -y install"
    pm_autoremove="sudo ${pm} -q -y autoremove"
    pm_cleanup="sudo ${pm} -q -y clean all"

    sudo ${pm} install dnf-plugins-core
    if [ "${version}" -le 26 ]; then
        sudo ${pm} config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
    fi
fi

# check if yum is installed, if package manager is not
if [ -z "${pm}" ]; then
    if [ -z "$(command -v yum 2> /dev/null)" ]; then
        printf "warning: yum not found.\n" 1>&2
    else
        pm="yum"
        pm_check="true"
        pm_update="sudo ${pm} update"
        pm_upgrade="true"
        pm_install="sudo ${pm} -q -y install"
        pm_autoremove="sudo ${pm} -q -y autoremove"
        pm_cleanup="sudo ${pm} -q -y clean all"
    fi
fi

# check if package manager is installed
if [ -z "${pm}" ]; then
    printf "error: Package manager not found.\n" 1>&2
    exit 1
fi

# update and check packages
${pm_update}
if ! ${pm_check} ; then
    printf "warning: Package manager check failed, continue anyway (y/n)?: "
    read -r yn
    if [ "${yn}" != "y" ]; then
	exit 1
    fi
fi
${pm_update}

# upgrade existing packages
${pm_upgrade}

packages=
packages="${packages} aspell"
packages="${packages} bash-completion"
packages="${packages} boost"
packages="${packages} boost-build"
packages="${packages} clang"
# packages="${packages} clang-6"
packages="${packages} clang-7"
packages="${packages} clang-8"
packages="${packages} clang-9"
packages="${packages} clang-10"
packages="${packages} clang-11"
packages="${packages} clang-12"
# packages="${packages} clang-13"
# packages="${packages} clang-14"
# packages="${packages} clang-15"
# packages="${packages} clang-16"
# packages="${packages} clang-17"
packages="${packages} cmake"
packages="${packages} curl"
packages="${packages} emacs"
# packages="${packages} emscripten"
packages="${packages} gcc"
# packages="${packages} gcc@6"
# packages="${packages} gcc@7"
# packages="${packages} gcc@8"
# packages="${packages} gcc@9"
packages="${packages} gcc@10"
packages="${packages} gcc@11"
packages="${packages} gcc@12"
packages="${packages} gcc@13"
packages="${packages} gcc@14"
packages="${packages} gdb"
packages="${packages} gh"
packages="${packages} git"
packages="${packages} git-lfs"
packages="${packages} gnuplot"
packages="${packages} go"
packages="${packages} gpg"
packages="${packages} guile"
packages="${packages} htop"
packages="${packages} jq"
packages="${packages} julia"
packages="${packages} keychain"
packages="${packages} llvm"
packages="${packages} llvm@7"
packages="${packages} llvm@8"
packages="${packages} llvm@9"
# packages="${packages} llvm@10"
packages="${packages} llvm@11"
packages="${packages} llvm@12"
packages="${packages} luarocks"
packages="${packages} mit-scheme"
packages="${packages} openssh"
# packages="${packages} parallel"
packages="${packages} pkg-config"
packages="${packages} python3"
packages="${packages} rust"
packages="${packages} rustc-completion"
packages="${packages} shellcheck"
packages="${packages} socat"
packages="${packages} sqlite"
packages="${packages} ssh-copy-id"
packages="${packages} stow"
packages="${packages} tcpdump"
packages="${packages} tig"
packages="${packages} zsh-completions"

${pm_install} ${packages}

# cleanup
${pm_autoremove}
${pm_cleanup}
